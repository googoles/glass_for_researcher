import React, { useState, useEffect } from 'react';\nimport { Play, Square, Settings, BarChart3, Camera, Clock, Zap } from 'lucide-react';\n\ninterface ActivityStatus {\n  isTracking: boolean;\n  currentActivity: {\n    title: string;\n    category: string;\n    startTime: string;\n    duration: number;\n  } | null;\n  lastAnalysis: {\n    category: string;\n    confidence: number;\n    timestamp: number;\n    productivity: string;\n  } | null;\n  captureInterval: number;\n  nextCaptureIn: number | null;\n}\n\ninterface ActivitySettings {\n  captureInterval: number;\n  enableAIAnalysis: boolean;\n  privacyMode: boolean;\n  activityCategories: string[];\n}\n\nconst ActivityTrackingWidget: React.FC = () => {\n  const [status, setStatus] = useState<ActivityStatus | null>(null);\n  const [settings, setSettings] = useState<ActivitySettings | null>(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch current status\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch('/api/activity/current');\n      if (response.ok) {\n        const data = await response.json();\n        setStatus(data);\n      }\n    } catch (err) {\n      console.error('Failed to fetch activity status:', err);\n    }\n  };\n\n  // Fetch settings\n  const fetchSettings = async () => {\n    try {\n      const response = await fetch('/api/activity/settings');\n      if (response.ok) {\n        const data = await response.json();\n        setSettings(data.settings);\n      }\n    } catch (err) {\n      console.error('Failed to fetch activity settings:', err);\n    }\n  };\n\n  // Start tracking\n  const startTracking = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/activity/tracking/start', {\n        method: 'POST'\n      });\n      if (response.ok) {\n        await fetchStatus();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Failed to start tracking');\n      }\n    } catch (err) {\n      setError('Network error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Stop tracking\n  const stopTracking = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/activity/tracking/stop', {\n        method: 'POST'\n      });\n      if (response.ok) {\n        await fetchStatus();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Failed to stop tracking');\n      }\n    } catch (err) {\n      setError('Network error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update settings\n  const updateSettings = async (newSettings: Partial<ActivitySettings>) => {\n    try {\n      const response = await fetch('/api/activity/settings', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newSettings)\n      });\n      if (response.ok) {\n        await fetchSettings();\n        setShowSettings(false);\n      }\n    } catch (err) {\n      console.error('Failed to update settings:', err);\n    }\n  };\n\n  // Manual capture\n  const captureNow = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/activity/capture', {\n        method: 'POST'\n      });\n      if (response.ok) {\n        // Refresh status after capture\n        setTimeout(fetchStatus, 1000);\n      }\n    } catch (err) {\n      console.error('Failed to capture:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format duration\n  const formatDuration = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m`;\n    return `${seconds}s`;\n  };\n\n  // Format next capture countdown\n  const formatNextCapture = (ms: number | null): string => {\n    if (!ms) return 'N/A';\n    const minutes = Math.ceil(ms / 60000);\n    return `${minutes}min`;\n  };\n\n  // Get category color\n  const getCategoryColor = (category: string): string => {\n    const colors: { [key: string]: string } = {\n      'focus': 'text-green-600 bg-green-100',\n      'communication': 'text-blue-600 bg-blue-100',\n      'research': 'text-purple-600 bg-purple-100',\n      'break': 'text-orange-600 bg-orange-100',\n      'creative': 'text-pink-600 bg-pink-100',\n      'other': 'text-gray-600 bg-gray-100'\n    };\n    return colors[category.toLowerCase()] || colors.other;\n  };\n\n  // Get productivity indicator color\n  const getProductivityColor = (productivity: string): string => {\n    const colors: { [key: string]: string } = {\n      'high': 'text-green-600',\n      'medium': 'text-yellow-600',\n      'low': 'text-red-600'\n    };\n    return colors[productivity] || 'text-gray-600';\n  };\n\n  useEffect(() => {\n    fetchStatus();\n    fetchSettings();\n    \n    // Set up polling for status updates\n    const interval = setInterval(fetchStatus, 30000); // Update every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  if (!status) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-lg p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          <BarChart3 className=\"w-5 h-5\" />\n          Activity Tracking\n        </h3>\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setShowSettings(!showSettings)}\n            className=\"p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100\"\n            title=\"Settings\"\n          >\n            <Settings className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-3 mb-4\">\n          <p className=\"text-red-800 text-sm\">{error}</p>\n        </div>\n      )}\n\n      {/* Current Status */}\n      <div className=\"space-y-4\">\n        {/* Tracking Status */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              status.isTracking ? 'bg-green-500 animate-pulse' : 'bg-gray-400'\n            }`} />\n            <span className=\"font-medium\">\n              {status.isTracking ? 'Active' : 'Inactive'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={captureNow}\n              disabled={loading || !status.isTracking}\n              className=\"p-2 text-gray-600 hover:text-gray-800 rounded-md hover:bg-gray-100 disabled:opacity-50\"\n              title=\"Capture Now\"\n            >\n              <Camera className=\"w-4 h-4\" />\n            </button>\n            \n            <button\n              onClick={status.isTracking ? stopTracking : startTracking}\n              disabled={loading}\n              className={`flex items-center gap-2 px-4 py-2 rounded-md font-medium transition-colors ${\n                status.isTracking\n                  ? 'bg-red-100 text-red-700 hover:bg-red-200'\n                  : 'bg-green-100 text-green-700 hover:bg-green-200'\n              } disabled:opacity-50`}\n            >\n              {loading ? (\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              ) : status.isTracking ? (\n                <Square className=\"w-4 h-4\" />\n              ) : (\n                <Play className=\"w-4 h-4\" />\n              )}\n              {status.isTracking ? 'Stop' : 'Start'}\n            </button>\n          </div>\n        </div>\n\n        {/* Current Activity */}\n        {status.currentActivity && (\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-1\">\n                  {status.currentActivity.title}\n                </h4>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                  getCategoryColor(status.currentActivity.category)\n                }`}>\n                  {status.currentActivity.category}\n                </span>\n              </div>\n              <div className=\"text-right text-sm text-gray-600\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  {formatDuration(status.currentActivity.duration)}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Last Analysis */}\n        {status.lastAnalysis && (\n          <div className=\"bg-blue-50 rounded-lg p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Latest Analysis</h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">Category:</span>\n                <span className={`ml-2 font-medium ${getCategoryColor(status.lastAnalysis.category)}`}>\n                  {status.lastAnalysis.category}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Confidence:</span>\n                <span className=\"ml-2 font-medium\">\n                  {Math.round(status.lastAnalysis.confidence * 100)}%\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Productivity:</span>\n                <span className={`ml-2 font-medium flex items-center gap-1 ${\n                  getProductivityColor(status.lastAnalysis.productivity)\n                }`}>\n                  <Zap className=\"w-3 h-3\" />\n                  {status.lastAnalysis.productivity}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Next Capture:</span>\n                <span className=\"ml-2 font-medium\">\n                  {formatNextCapture(status.nextCaptureIn)}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Settings Panel */}\n      {showSettings && settings && (\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Settings</h4>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Capture Interval\n              </label>\n              <select\n                value={settings.captureInterval}\n                onChange={(e) => updateSettings({ captureInterval: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value={300000}>5 minutes</option>\n                <option value={900000}>15 minutes</option>\n                <option value={1800000}>30 minutes</option>\n                <option value={3600000}>1 hour</option>\n              </select>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                AI Analysis\n              </label>\n              <button\n                onClick={() => updateSettings({ enableAIAnalysis: !settings.enableAIAnalysis })}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                  settings.enableAIAnalysis ? 'bg-blue-600' : 'bg-gray-200'\n                }`}\n              >\n                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  settings.enableAIAnalysis ? 'translate-x-6' : 'translate-x-1'\n                }`} />\n              </button>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Privacy Mode\n              </label>\n              <button\n                onClick={() => updateSettings({ privacyMode: !settings.privacyMode })}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                  settings.privacyMode ? 'bg-red-600' : 'bg-gray-200'\n                }`}\n              >\n                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  settings.privacyMode ? 'translate-x-6' : 'translate-x-1'\n                }`} />\n              </button>\n            </div>\n\n            <button\n              onClick={() => setShowSettings(false)}\n              className=\"w-full px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors\"\n            >\n              Close Settings\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ActivityTrackingWidget;